name: Docker build and push

on:
  push:
    branches:
      - 'main'

env:
  IMAGE_NAME: larmic/tp-link-hs110-api

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Set up image names
        run: |
          echo "LATEST_IMAGE=$IMAGE_NAME:latest" >> $GITHUB_ENV
          echo "TIMESTAMP_IMAGE=$IMAGE_NAME:$(date +'%Y-%m-%d-%s')" >> $GITHUB_ENV

      - name: Set up Go 1.15.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Go get dependencies
        run: go mod download

      - name: Go Test
        run: go test -v ./...

      - name: Go Build
        run: CGO_ENABLED=0 GOOS=linux go build -v ./...

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the Docker image
        run: |
          echo build docker image $IMAGE_NAME:amd64
          DOCKER_BUILDKIT=1 docker build --build-arg opts="CGO_ENABLED=0 GOARCH=amd64" --tag $IMAGE_NAME:amd64 .
          docker push $IMAGE_NAME:amd64

          echo build docker image $IMAGE_NAME:arm32v6
          DOCKER_BUILDKIT=1 docker build --build-arg opts="CGO_ENABLED=0 GOARCH=arm GOARM=6" --tag $IMAGE_NAME:arm32v6 .
          docker push $IMAGE_NAME:arm32v6

          echo build docker image $IMAGE_NAME:arm32v7
          DOCKER_BUILDKIT=1 docker build --build-arg opts="CGO_ENABLED=0 GOARCH=arm GOARM=7" --tag $IMAGE_NAME:arm32v7 .
          docker push $IMAGE_NAME:arm32v7

          echo build docker image $IMAGE_NAME:arm64v8
          DOCKER_BUILDKIT=1 docker build --build-arg opts="CGO_ENABLED=0 GOARCH=arm64 GOARM=8" --tag $IMAGE_NAME:arm64v8 .
          docker push $IMAGE_NAME:arm64v8

          echo create manifest
          docker manifest create $LATEST_IMAGE $IMAGE_NAME:amd64 $IMAGE_NAME:arm/v6 $IMAGE_NAME:arm/v7 $IMAGE_NAME:arm64/v8
          docker manifest create $TIMESTAMP_IMAGE $IMAGE_NAME:amd64 $IMAGE_NAME:arm/v6 $IMAGE_NAME:arm/v7 $IMAGE_NAME:arm64/v8
          docker manifest push $LATEST_IMAGE
          docker manifest push $TIMESTAMP_IMAGE